local cc = require "script/CClient"
local monarch = require "monarch.monarch"

local box_size = 46
local box_z = 0.3
local board_width = 6
local board_height = 10
local move_speed = 10
local box_speed = 12
local gaming = false
local inited = false

local p1 = {}
p1.id = 1
p1.ready = false
p1.pos = 1 --1~6
p1.startX = 140
p1.startY = 138
p1.hisX = 140
p1.hisY = 45
p1.dice = 1 --1~6
p1.box = "/box1"
p1.magicNum = "/num1"
p1.magicLines = "/lines1"
p1.board = {}
p1.history = {}
p1.shooting = false
p1.moving = false
p1.delay = 0

local p2 = {}
p2.id = 2
p2.ready = false
p2.pos = 1 --1~6
p2.startX = 500
p2.startY = 138
p2.hisX = 500
p2.hisY = 45
p2.dice = 1 --1~6
p2.box = "/box2"
p2.magicNum = "/num2"
p2.magicLines = "/lines2"
p2.board = {}
p2.history = {}
p2.shooting = false
p2.moving = false
p2.delay = 0

function init(self)
    startGame()
end

function startGame()
    inited = true
    msg.post(p1.box, "disable")
    msg.post(p1.magicNum, "disable")
    msg.post(p1.magicLines, "disable")
    msg.post(p2.box, "disable")
    msg.post(p2.magicNum, "disable")
    msg.post(p2.magicLines, "disable")
    msg.post("/p2", "disable")
    msg.post("/dice2", "disable")
    msg.post("/gui#game", "waiting", { show = true })
    msg.post("/gui#game", "restart", { show = false })
    msg.post("/gui#game", "win", { show = false })
    msg.post(".", "acquire_input_focus")
    cc.init(on_state_change, on_leave)
end

function on_leave()
    p1.ready = false
    p2.ready = false
    gaming = false
    inited = false
    msg.post("/gui#game", "restart", { show = true })
    if #p1.board > #p2.board then
        msg.post("/gui#game", "win", { show = true, winner="p2" })
    else
        msg.post("/gui#game", "win", { show = true, winner="p1" })
    end
end

function on_state_change(state)
    for k, v in pairs(state.players.items) do
        update_ready(whichOne(k), v.ready)
        update_board(whichOne(k), v.board)
        update_box(whichOne(k), v.shooting)
        update_history(whichOne(k), v.history)
        update_magic(whichOne(k), v.magic)
        update_dice(whichOne(k), v.dice)
        update_pos(whichOne(k), v.pos)
        --update_delay(whichOne(k), v.delay)
    end
    if gaming == false then
        if p1.ready and p2.ready then
            msg.post("/gui#game", "waiting", { show = false })
            msg.post("/gui#game", "restart", { show = false })
            msg.post("/gui#game", "win", { show = false })
            msg.post("/p2", "enable")
            msg.post("/dice2", "enable")
            gaming = true
        end
    end
end

function whichOne(id)
    local p = p1
    if (id ~= cc.id) then
        p = p2
    end
    return p
end

function update_delay(p, delay)
    print(p.id..":"..delay)
end

function update_ready(p, ready)
    if ready ~= p.ready then
        p.ready = ready
    end
end

function update_dice(p, dice)
    if dice ~= p.dice then
        p.dice = dice
        msg.post("/dice" .. p.id .. "#sprite", "play_animation", { id = hash(dice) })
    end
end

function update_pos(p, pos)
    if pos ~= p.pos then
        p.pos = pos
        go.animate("/p" .. p.id, "position.x", go.PLAYBACK_ONCE_FORWARD, p.startX + pos * box_size, go.EASING_LINEAR, 1 / move_speed, 0, function()
            p.moving = false
        end)
    end
end

function update_board(p, board)
    if board == nil then
        return
    end
    go.delete(p.board)
    p.board = {}
    for i, v in ipairs(board.items) do
        local px = p.startX + ((i - 1) % board_width + 1) * box_size;
        local py = p.startY + (board_height - math.floor((i - 1) / board_width) - 1) * box_size;
        if v > 0 then
            local pos = vmath.vector3(px, py, box_z)
            local piece = factory.create("/board#factory", pos)
            msg.post(msg.url(nil, piece, "sprite"), "play_animation", { id = hash(v) })
            p.board[i] = piece
        end
    end
end

function update_box(p, shooting)
    if p.id == 2 then
        if shooting then
            local pos = vmath.vector3(p2.startX + p2.pos * box_size, p2.startY, box_z)
            go.set_position(pos, p2.box)
            msg.post(msg.url(nil, p2.box, "sprite"), "play_animation", { id = hash(p2.dice) })
            msg.post(p2.box, "enable")
        else
            msg.post(p2.box, "disable")
        end
        p2.shooting = shooting
    end
end

function update_history(p, his)
    if his == nil then
        return
    end
    go.delete(p.history)
    p.history = {}
    local empty = (board_width - #his.items) * box_size
    for i, v in ipairs(his.items) do
        local px = empty + p.hisX + ((i - 1) % board_width + 1) * box_size;
        local pos = vmath.vector3(px, p1.hisY, box_z)
        local piece = factory.create("/board#factory", pos)
        msg.post(msg.url(nil, piece, "sprite"), "play_animation", { id = hash(v) })
        p.history[i] = piece
    end
end

function update_magic(p, lines)
    if lines == nil then
        return
    end
    if lines == 0 then
        msg.post(p.magicNum, "disable")
        msg.post(p.magicLines, "disable")
    else
        if lines == 1 then
            msg.post(p.magicNum .. "#sprite", "play_animation", { id = hash("l1") })
            msg.post(p.magicLines .. "#sprite", "play_animation", { id = hash("line") })
        elseif lines > 1 then
            msg.post(p.magicNum .. "#sprite", "play_animation", { id = hash("l" .. lines) })
            msg.post(p.magicLines .. "#sprite", "play_animation", { id = hash("lines") })
        end
        msg.post(p.magicNum, "enable")
        msg.post(p.magicLines, "enable")
    end
end

function final(self)
    -- Add finalization code here
    -- Learn more: https://defold.com/manuals/script/
    -- Remove this function if not needed
end

function update_delay()
    print(cc.ping_count)
end

function update(self, dt)
    --update_delay()
    if p1.shooting then
        local p1_box_pos = go.get_position(p1.box)
        local p1u = math.ceil((p1_box_pos.x - p1.startX) / box_size)
        local p1v = board_height - math.ceil((p1_box_pos.y - p1.startY) / box_size)
        local p1i = 1
        if p1v <= 0 then
            msg.post(p1.box, "disable")
            p1.shooting = false
            cc.send("shoot", { d = 0 })
        else
            for i = board_height, 1, -1 do
                p1i = p1.board[(i - 1) * board_width + p1u]
                if p1i ~= nil and p1v < i then
                    p1v = i
                    break ;
                end
            end
            p1i = (p1v - 1) * board_width + p1u
            if p1.board[p1i] ~= nil then
                local d = go.get(msg.url(nil, p1.board[p1i], "sprite"), "animation")
                if d == hash(p1.dice) then
                    msg.post(msg.url(nil, p1.board[p1i], "sprite"), "play_animation", { id = hash("boom") })
                    cc.send("boom", { i = p1i })
                end
                msg.post(p1.box, "disable")
                p1.shooting = false
                cc.send("shoot", { d = 0 })
            else
                p1_box_pos = go.get_position(p1.box) + vmath.vector3(0, box_speed, 0);
                go.set_position(p1_box_pos, p1.box)
            end
        end
    end
    if p2.shooting then
        p2_box_pos = go.get_position(p2.box) + vmath.vector3(0, box_speed, 0);
        go.set_position(p2_box_pos, p2.box)
    end
end

function on_message(self, message_id, message, sender)
    if gaming == true then
        if message_id == hash("on_gesture") or message_id == hash("input") then
            if p1.moving == false then
                if message.action_id == hash("left") or message.swipe_left then
                    if (p1.pos > 1) then
                        p1.moving = true
                        cc.send("move", { dir = "l" })
                    end
                elseif message.action_id == hash("right") or message.swipe_right then
                    if (p1.pos < board_width) then
                        p1.moving = true
                        cc.send("move", { dir = "r" })
                    end
                end
            end
            if message.action_id == hash("up") or message.swipe_up then
                if p1.shooting == false then
                    local p = vmath.vector3(p1.startX + p1.pos * box_size, p1.startY, box_z)
                    go.set_position(p, p1.box)
                    msg.post(msg.url(nil, p1.box, "sprite"), "play_animation", { id = hash(p1.dice) })
                    msg.post(p1.box, "enable")
                    cc.send("shoot", { d = p1.dice })
                    p1.shooting = true
                end
            elseif message.action_id == hash("down") or message.swipe_down then
                if (#p1.history >= board_width / 2) then
                    cc.send("magic")
                end
            elseif message.action_id == hash("roll") or message.tap then
                cc.send("roll")
            end
        end
    elseif not inited then
        if message.action_id == hash("roll") or message.tap then
            --startGame()

            monarch.show("login_scene")
        end
    end
end

function on_input(self, action_id, action)
    if action.released then
        msg.post("#", "input", { action_id = action_id, action = action })
    end

end

function on_reload(self)
    -- Add reload-handling code here
    -- Learn more: https://defold.com/manuals/hot-reload/
    -- Remove this function if not needed
end
