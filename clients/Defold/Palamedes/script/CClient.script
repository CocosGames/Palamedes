local ColyseusClient = require "colyseus.client"

local client
local room

function init(self)

end

function init_client(self)
    -- Add initialization code here
    client = ColyseusClient.new("ws://localhost:2567")

    -- join chat room
    client:join_or_create("game", {}, function(err, _room)
        if err then
            print("JOIN ERROR: " .. err)
            return
        end

        room = _room
    end)
end

function getAllRooms()
    client:get_available_rooms("battle", function(err, rooms)
        if (err) then
            console.error(err);
            return
        end

        for i, room in pairs(rooms) do
            print(room.roomId)
            print(room.clients)
            print(room.maxClients)
            print(room.metadata)
        end
    end);
end

function joinToARoom()
    client:consume_seat_reservation(reservation, function(err, room)
        if (err ~= nil) then
            print("join error: " .. err)
            return
        end

        print("joined successfully")
    end)

    room:on("statechange", function(state)
        print("new state:", state)
    end)

    room:on_message("powerup", function(message)
        print("message received from server")
        print(message)
    end)

    room:on("leave", function()
        print("client left the room")
    end)

    room:on("error", function(code, message)
        print("oops, error ocurred:")
        print(message)
    end)

end

function sendMessage()
    --
    -- sending message with string type
    --
    room:send("move", { direction = "left" })

    --
    -- sending message with number type
    --
    room:send(0, { direction = "left" })


end

function leaveTheRoom()
    -- consented leave
    room:leave()

    -- unconsented leave
    room:leave(false)
end

function final(self)
    -- Add finalization code here
    -- Learn more: https://defold.com/manuals/script/
    -- Remove this function if not needed
end

function update(self, dt)
    -- Add update code here
    -- Learn more: https://defold.com/manuals/script/
    -- Remove this function if not needed
end

function fixed_update(self, dt)
    -- Add update code here
    -- Learn more: https://defold.com/manuals/script/
    -- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
    -- Add message-handling code here
    -- Learn more: https://defold.com/manuals/message-passing/
    -- Remove this function if not needed
end

function on_input(self, action_id, action)
    -- Add input-handling code here. The game object this script is attached to
    -- must have acquired input focus:
    --
    --    msg.post(".", "acquire_input_focus")
    --
    -- All mapped input bindings will be received. Mouse and touch input will
    -- be received regardless of where on the screen it happened.
    -- Learn more: https://defold.com/manuals/input/
    -- Remove this function if not needed
end

function on_reload(self)
    -- Add reload-handling code here
    -- Learn more: https://defold.com/manuals/hot-reload/
    -- Remove this function if not needed
end

function reconnect()
    client:reconnect(cached_reconnection_token, function(err, room)
        if (err ~= nil) then
            print("join error: " .. err)
            return
        end

        print("joined successfully")
    end)
end

function window_callback(self, event, data)
    if event == window.WINDOW_EVENT_FOCUS_GAINED then
        -- iOS workaround to re-active WebSocket connection after phone is unlocked
        room:send("whatever")
    end
end

window.set_listener(window_callback)
